name: hydrun CI

on:
  push:
  pull_request:
  schedule:
    - cron: "0 0 * * 0"

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project:
          - dir: .
            os: debian
            arch: amd64
            target: x86_64-unknown-linux-musl
            pkgs: clang llvm gcc-x86-64-linux-gnu
            cc: x86_64-linux-gnu-gcc
            target_cc: clang
            bins: [pojdectl-rs]
            suffix: .linux-x86_64
          - dir: .
            os: debian
            arch: amd64
            target: aarch64-unknown-linux-musl
            pkgs: clang llvm gcc-aarch64-linux-gnu
            cc: aarch64-linux-gnu-gcc
            target_cc: clang
            bins: [pojdectl-rs]
            suffix: .linux-aarch64
          - dir: .
            os: debian
            arch: amd64
            target: armv7-unknown-linux-musleabihf
            pkgs: clang llvm gcc-arm-linux-gnueabihf
            cc: arm-linux-gnueabihf-gcc
            target_cc: clang
            bins: [pojdectl-rs]
            suffix: .linux-armv7l
          # TODO: Switch to musl as soon as Rust releases the 2021 edition and adds a RISC-V musl target
          - dir: .
            os: debian
            arch: amd64
            target: riscv64gc-unknown-linux-gnu
            pkgs: gcc-riscv64-linux-gnu
            cc: riscv64-linux-gnu-gcc
            target_cc: clang
            bins: [pojdectl-rs]
            suffix: .linux-riscv64
          - dir: .
            os: debian
            arch: amd64
            target: x86_64-pc-windows-gnu
            pkgs: clang llvm gcc-mingw-w64
            cc: x86_64-w64-mingw32-gcc
            target_cc: clang
            bins: [pojdectl-rs.exe]
            suffix: .windows-x86_64.exe
          - dir: .
            os: joseluisq/rust-linux-darwin-builder
            arch: amd64
            target: x86_64-apple-darwin
            pkgs: gcc-multilib g++-multilib
            cc: x86_64-apple-darwin20.2-clang
            target_cc: x86_64-apple-darwin20.2-clang
            bins: [pojdectl-rs]
            suffix: .macos-x86_64
          - dir: .
            os: joseluisq/rust-linux-darwin-builder
            arch: amd64
            target: aarch64-apple-darwin
            pkgs: ""
            cc: aarch64-apple-darwin20.2-clang
            target_cc: aarch64-apple-darwin20.2-clang -arch arm64
            bins: [pojdectl-rs]
            suffix: .macos-aarch64

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Set up hydrun
        run: |
          curl -L -o /tmp/hydrun https://github.com/pojntfx/hydrun/releases/download/latest/hydrun.linux-$(uname -m)
          sudo install /tmp/hydrun /usr/local/bin
      - name: Build with hydrun
        working-directory: ${{ matrix.project.dir }}
        run: hydrun -o ${{ matrix.project.os }} -a ${{ matrix.project.arch }} 'sh -c "CARGO_BUILD_TARGET=\"${{ matrix.project.target }}\" PKGS=\"${{ matrix.project.pkgs }}\" CROSS_COMPILER=\"${{ matrix.project.cc }}\" TARGET_CC=\"${{ matrix.project.target_cc }}\" ./Hydrunfile"'
      - name: Fix permissions for output and copy to temp dir
        working-directory: ${{ matrix.project.dir }}/target/${{ matrix.project.target }}/release
        run: |
          sudo chown -R $USER .
          mkdir -p /tmp/out
          for file in ${{ join(matrix.project.bins,' ') }}; do
            cp $file /tmp/out/$file${{ matrix.project.suffix }}
          done
      - name: Upload output
        uses: actions/upload-artifact@v2
        with:
          name: staging-${{ matrix.project.dir }}
          path: |
            /tmp/out/*

  publish-linux:
    runs-on: ubuntu-latest
    needs: build-linux

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download output
        uses: actions/download-artifact@v2
        with:
          path: /tmp/out
      - name: Publish pre-release to GitHub releases
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: unstable
          prerelease: true
          files: |
            /tmp/out/**/*
      - name: Publish release to GitHub releases
        if: startsWith(github.ref, 'refs/tags/v')
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            /tmp/out/**/*
